{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:28:54.730219Z","iopub.execute_input":"2025-05-25T16:28:54.730515Z","iopub.status.idle":"2025-05-25T16:28:54.737843Z","shell.execute_reply.started":"2025-05-25T16:28:54.730491Z","shell.execute_reply":"2025-05-25T16:28:54.736891Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/digit-recognizer/sample_submission.csv\n/kaggle/input/digit-recognizer/train.csv\n/kaggle/input/digit-recognizer/test.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# Simple MNIST NN from scratch\n\nIn this notebook, I implemented a simple two-layer neural network and trained it on the MNIST digit recognizer dataset. It's meant to be an instructional example, through which you can understand the underlying math of neural networks better.\n\nHere's a video I made explaining all the math and showing my progress as I coded the network: https://youtu.be/w8yWXqWQYmU","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\ndata = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:28:50.595652Z","iopub.execute_input":"2025-05-25T16:28:50.595977Z","iopub.status.idle":"2025-05-25T16:28:54.728598Z","shell.execute_reply.started":"2025-05-25T16:28:50.595939Z","shell.execute_reply":"2025-05-25T16:28:54.727448Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"data = np.array(data)\nm, n = data.shape\nnp.random.shuffle(data) # shuffle before splitting into dev and training sets\n\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\nX_dev = X_dev / 255.\n\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\nX_train = X_train / 255.\n_,m_train = X_train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:29:07.308776Z","iopub.execute_input":"2025-05-25T16:29:07.309110Z","iopub.status.idle":"2025-05-25T16:29:08.240854Z","shell.execute_reply.started":"2025-05-25T16:29:07.309084Z","shell.execute_reply":"2025-05-25T16:29:08.239762Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"Y_train\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:29:27.335021Z","iopub.execute_input":"2025-05-25T16:29:27.335347Z","iopub.status.idle":"2025-05-25T16:29:27.344035Z","shell.execute_reply.started":"2025-05-25T16:29:27.335322Z","shell.execute_reply":"2025-05-25T16:29:27.342858Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"array([5, 7, 7, ..., 0, 6, 1])"},"metadata":{}}],"execution_count":4},{"cell_type":"markdown","source":"Our NN will have a simple two-layer architecture. Input layer $a^{[0]}$ will have 784 units corresponding to the 784 pixels in each 28x28 input image. A hidden layer $a^{[1]}$ will have 10 units with ReLU activation, and finally our output layer $a^{[2]}$ will have 10 units corresponding to the ten digit classes with softmax activation.\n\n**Forward propagation**\n\n$$Z^{[1]} = W^{[1]} X + b^{[1]}$$\n$$A^{[1]} = g_{\\text{ReLU}}(Z^{[1]}))$$\n$$Z^{[2]} = W^{[2]} A^{[1]} + b^{[2]}$$\n$$A^{[2]} = g_{\\text{softmax}}(Z^{[2]})$$\n\n**Backward propagation**\n\n$$dZ^{[2]} = A^{[2]} - Y$$\n$$dW^{[2]} = \\frac{1}{m} dZ^{[2]} A^{[1]T}$$\n$$dB^{[2]} = \\frac{1}{m} \\Sigma {dZ^{[2]}}$$\n$$dZ^{[1]} = W^{[2]T} dZ^{[2]} .* g^{[1]\\prime} (z^{[1]})$$\n$$dW^{[1]} = \\frac{1}{m} dZ^{[1]} A^{[0]T}$$\n$$dB^{[1]} = \\frac{1}{m} \\Sigma {dZ^{[1]}}$$\n\n**Parameter updates**\n\n$$W^{[2]} := W^{[2]} - \\alpha dW^{[2]}$$\n$$b^{[2]} := b^{[2]} - \\alpha db^{[2]}$$\n$$W^{[1]} := W^{[1]} - \\alpha dW^{[1]}$$\n$$b^{[1]} := b^{[1]} - \\alpha db^{[1]}$$\n\n**Vars and shapes**\n\nForward prop\n\n- $A^{[0]} = X$: 784 x m\n- $Z^{[1]} \\sim A^{[1]}$: 10 x m\n- $W^{[1]}$: 10 x 784 (as $W^{[1]} A^{[0]} \\sim Z^{[1]}$)\n- $B^{[1]}$: 10 x 1\n- $Z^{[2]} \\sim A^{[2]}$: 10 x m\n- $W^{[1]}$: 10 x 10 (as $W^{[2]} A^{[1]} \\sim Z^{[2]}$)\n- $B^{[2]}$: 10 x 1\n\nBackprop\n\n- $dZ^{[2]}$: 10 x m ($~A^{[2]}$)\n- $dW^{[2]}$: 10 x 10\n- $dB^{[2]}$: 10 x 1\n- $dZ^{[1]}$: 10 x m ($~A^{[1]}$)\n- $dW^{[1]}$: 10 x 10\n- $dB^{[1]}$: 10 x 1","metadata":{}},{"cell_type":"code","source":"def init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2\n\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n    \ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n\ndef ReLU_deriv(Z):\n    return Z > 0\n\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1 / m * dZ2.dot(A1.T)\n    db2 = 1 / m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1 / m * dZ1.dot(X.T)\n    db1 = 1 / m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:29:50.504086Z","iopub.execute_input":"2025-05-25T16:29:50.504409Z","iopub.status.idle":"2025-05-25T16:29:50.515663Z","shell.execute_reply.started":"2025-05-25T16:29:50.504384Z","shell.execute_reply":"2025-05-25T16:29:50.514506Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def get_predictions(A2):\n    return np.argmax(A2, 0)\n\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:29:58.769154Z","iopub.execute_input":"2025-05-25T16:29:58.769482Z","iopub.status.idle":"2025-05-25T16:29:58.777114Z","shell.execute_reply.started":"2025-05-25T16:29:58.769454Z","shell.execute_reply":"2025-05-25T16:29:58.776141Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:30:08.491402Z","iopub.execute_input":"2025-05-25T16:30:08.491837Z","iopub.status.idle":"2025-05-25T16:30:54.384047Z","shell.execute_reply.started":"2025-05-25T16:30:08.491806Z","shell.execute_reply":"2025-05-25T16:30:54.382238Z"}},"outputs":[{"name":"stdout","text":"Iteration:  0\n[0 2 0 ... 0 7 0] [5 7 7 ... 0 6 1]\n0.09663414634146342\nIteration:  10\n[0 2 7 ... 0 7 1] [5 7 7 ... 0 6 1]\n0.21536585365853658\nIteration:  20\n[0 2 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.2958048780487805\nIteration:  30\n[0 0 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.3631219512195122\nIteration:  40\n[5 4 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.42009756097560974\nIteration:  50\n[5 4 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.46980487804878046\nIteration:  60\n[5 4 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.520390243902439\nIteration:  70\n[4 4 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.5681463414634146\nIteration:  80\n[4 9 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.6077560975609756\nIteration:  90\n[4 9 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.6392926829268293\nIteration:  100\n[4 9 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.666609756097561\nIteration:  110\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.6899268292682926\nIteration:  120\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7072926829268292\nIteration:  130\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7226829268292683\nIteration:  140\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7355609756097561\nIteration:  150\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7471219512195122\nIteration:  160\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7576585365853659\nIteration:  170\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7662682926829268\nIteration:  180\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.774390243902439\nIteration:  190\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7818048780487805\nIteration:  200\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7875121951219513\nIteration:  210\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7925853658536586\nIteration:  220\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.7969024390243903\nIteration:  230\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8010731707317074\nIteration:  240\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8052926829268293\nIteration:  250\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8088780487804879\nIteration:  260\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8127073170731707\nIteration:  270\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8160731707317073\nIteration:  280\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8185853658536585\nIteration:  290\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8212439024390243\nIteration:  300\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.824\nIteration:  310\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8264878048780487\nIteration:  320\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8289756097560975\nIteration:  330\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8310487804878048\nIteration:  340\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8327073170731707\nIteration:  350\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8345609756097561\nIteration:  360\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8366829268292683\nIteration:  370\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8383170731707317\nIteration:  380\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8396585365853658\nIteration:  390\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8412682926829268\nIteration:  400\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8430731707317073\nIteration:  410\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8444390243902439\nIteration:  420\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8459024390243902\nIteration:  430\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8472439024390244\nIteration:  440\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.848170731707317\nIteration:  450\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8492439024390244\nIteration:  460\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8505121951219512\nIteration:  470\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8515121951219512\nIteration:  480\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8529024390243902\nIteration:  490\n[4 7 7 ... 0 6 1] [5 7 7 ... 0 6 1]\n0.8536585365853658\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"def make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    predictions = get_predictions(A2)\n    return predictions\n\ndef test_prediction(index, W1, b1, W2, b2):\n    current_image = X_train[:, index, None]\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", label)\n    \n    current_image = current_image.reshape((28, 28)) * 255\n    plt.gray()\n    plt.imshow(current_image, interpolation='nearest')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:31:05.078475Z","iopub.execute_input":"2025-05-25T16:31:05.078926Z","iopub.status.idle":"2025-05-25T16:31:05.086036Z","shell.execute_reply.started":"2025-05-25T16:31:05.078897Z","shell.execute_reply":"2025-05-25T16:31:05.085031Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"test_prediction(0, W1, b1, W2, b2)\ntest_prediction(1, W1, b1, W2, b2)\ntest_prediction(2, W1, b1, W2, b2)\ntest_prediction(3, W1, b1, W2, b2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:31:15.858770Z","iopub.execute_input":"2025-05-25T16:31:15.859146Z","iopub.status.idle":"2025-05-25T16:31:16.581099Z","shell.execute_reply.started":"2025-05-25T16:31:15.859118Z","shell.execute_reply":"2025-05-25T16:31:16.580055Z"}},"outputs":[{"name":"stdout","text":"Prediction:  [4]\nLabel:  5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Prediction:  [7]\nLabel:  7\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Prediction:  [7]\nLabel:  7\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Prediction:  [2]\nLabel:  2\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"dev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\nget_accuracy(dev_predictions, Y_dev)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T16:31:46.798896Z","iopub.execute_input":"2025-05-25T16:31:46.799256Z","iopub.status.idle":"2025-05-25T16:31:46.812456Z","shell.execute_reply.started":"2025-05-25T16:31:46.799229Z","shell.execute_reply":"2025-05-25T16:31:46.811584Z"}},"outputs":[{"name":"stdout","text":"[0 3 1 3 4 9 5 2 0 9 8 8 7 0 4 4 9 9 2 3 0 8 7 7 1 2 6 9 5 3 9 9 6 1 3 6 1\n 7 4 5 6 0 0 7 0 9 9 2 7 0 2 6 0 7 6 4 3 0 9 4 0 7 7 1 6 3 7 9 2 7 7 5 7 4\n 0 3 3 1 2 2 1 1 1 8 4 7 8 4 9 7 8 6 2 8 1 2 4 6 1 2 6 6 7 7 1 6 6 3 0 5 4\n 7 4 4 2 2 2 7 3 3 3 3 4 0 7 8 4 5 9 9 0 3 6 1 2 4 7 1 4 5 4 1 4 6 7 2 6 3\n 5 4 2 7 3 2 4 8 7 3 1 2 0 8 0 4 2 6 9 4 2 2 5 3 5 5 0 2 9 8 8 9 6 5 8 1 8\n 9 0 3 7 8 7 3 2 3 7 9 9 7 4 1 7 2 7 2 3 7 1 9 0 1 2 9 9 0 2 7 9 3 5 6 3 7\n 8 4 9 0 0 9 9 1 2 4 7 8 2 6 8 0 5 5 7 6 1 1 4 6 3 7 8 2 9 0 7 5 0 3 9 0 7\n 2 5 9 4 9 3 1 3 3 8 8 4 9 6 1 0 4 5 4 9 2 4 0 1 3 3 8 6 7 8 1 2 1 3 2 3 6\n 3 3 5 0 4 4 7 0 3 1 7 8 0 5 3 9 6 7 2 4 0 3 5 5 2 2 4 2 7 0 8 8 3 0 5 3 6\n 0 6 7 1 9 0 2 4 9 7 1 2 7 8 4 2 1 2 0 7 0 7 6 0 2 3 0 5 6 8 5 8 4 8 9 9 1\n 1 3 6 4 0 2 5 7 8 4 4 9 3 6 9 7 5 5 8 7 1 1 1 6 5 1 5 7 6 9 7 3 7 2 4 3 2\n 5 2 6 7 2 2 2 1 0 8 9 7 6 0 5 2 0 1 1 7 6 2 4 4 6 7 3 3 9 7 6 8 3 1 0 1 1\n 6 0 0 2 6 7 8 3 1 1 5 2 3 3 3 4 2 4 9 4 4 8 7 3 4 2 4 4 8 1 9 4 6 9 4 3 8\n 2 9 4 4 3 5 5 1 6 8 8 1 4 1 1 0 2 1 8 3 7 7 0 3 5 5 5 2 1 4 1 3 0 7 1 0 4\n 0 1 4 0 1 2 1 4 4 9 8 5 8 1 3 2 8 8 9 1 4 0 3 0 3 9 9 8 6 1 2 7 8 8 5 1 1\n 1 2 8 2 8 7 9 1 6 0 5 5 0 0 2 8 3 8 9 8 9 2 7 7 7 4 3 0 7 0 9 1 5 6 8 4 0\n 2 0 9 7 6 9 8 7 6 3 3 1 0 2 6 9 1 5 4 1 2 8 3 7 5 6 3 3 4 2 2 3 0 7 3 3 6\n 9 9 5 6 3 5 0 5 1 6 6 8 2 3 3 2 4 1 6 6 7 6 1 1 0 6 9 6 8 2 7 6 1 6 9 1 3\n 7 8 3 6 5 1 2 9 9 6 1 3 6 5 3 5 9 7 0 5 9 5 4 0 9 0 7 9 5 0 7 7 7 1 4 6 8\n 7 3 1 1 2 6 4 3 8 6 8 2 5 5 5 4 0 5 4 2 3 0 7 7 6 7 1 6 1 2 7 5 9 1 8 3 7\n 0 5 1 7 8 6 2 7 6 5 6 8 2 5 0 4 2 4 4 4 0 1 1 2 0 3 9 9 7 2 1 8 0 6 1 3 1\n 8 8 3 6 9 2 8 9 0 0 7 1 1 7 7 4 6 0 4 6 7 6 6 8 0 5 1 5 2 2 0 5 9 0 6 2 9\n 8 3 0 5 4 9 8 3 2 9 8 3 0 0 0 2 5 9 4 5 5 3 0 9 3 1 6 1 8 4 4 3 8 1 0 8 1\n 9 2 8 0 6 7 7 0 3 0 3 3 5 4 1 3 2 0 7 8 8 3 6 3 9 8 7 9 1 5 7 3 8 9 4 8 7\n 9 7 8 8 1 1 9 7 0 4 9 3 1 6 9 9 4 1 2 0 6 0 9 4 6 9 2 1 1 5 4 1 0 6 5 8 7\n 1 1 1 9 0 7 6 3 5 0 5 7 9 0 7 0 1 2 4 5 0 9 5 0 3 0 3 8 1 7 7 0 6 1 9 6 7\n 0 4 6 8 0 9 2 7 7 7 5 8 4 0 2 9 7 1 1 2 1 4 7 4 5 3 6 4 3 8 1 8 1 1 1 7 7\n 1] [0 3 1 8 9 9 8 1 5 9 8 8 7 0 4 4 9 9 2 3 0 8 7 3 8 2 6 9 5 3 9 9 6 1 3 6 1\n 7 4 8 6 0 0 7 0 4 9 2 7 0 2 6 2 7 7 9 3 0 9 4 0 7 7 1 6 3 7 9 4 7 7 5 7 9\n 0 3 3 1 2 2 1 1 1 3 4 7 8 4 4 7 8 6 2 8 1 9 4 6 1 2 6 6 7 7 1 5 6 3 0 5 4\n 7 4 4 2 2 5 9 3 3 3 5 4 0 7 8 5 5 7 9 5 3 6 1 2 9 3 1 4 5 5 1 4 6 7 2 6 2\n 5 4 2 7 3 2 4 8 3 3 1 6 0 7 0 4 2 6 9 4 2 2 5 3 4 5 0 2 9 5 8 9 6 8 8 1 8\n 9 0 3 7 2 7 3 2 3 7 9 9 9 4 1 7 2 9 2 3 7 1 9 0 1 2 9 9 0 2 7 4 3 5 6 3 7\n 8 4 9 2 0 9 9 1 2 4 7 8 2 6 8 2 5 6 7 6 1 1 4 5 3 7 5 2 9 0 7 5 0 3 9 0 7\n 2 8 7 4 9 5 1 3 3 8 6 4 7 6 1 0 4 8 0 3 2 0 0 1 5 3 8 6 7 8 1 2 1 3 6 3 6\n 5 3 5 0 4 4 9 5 3 8 7 8 0 6 3 3 6 7 0 5 0 3 5 5 2 5 4 2 7 0 2 8 3 0 5 8 6\n 0 6 7 1 9 0 2 4 9 7 1 2 7 1 4 2 1 2 0 7 0 7 6 0 2 3 4 5 6 8 8 8 4 3 9 4 1\n 1 3 6 5 0 2 5 7 8 4 9 8 3 6 3 7 5 5 8 7 1 1 1 6 5 1 3 7 6 9 2 3 9 2 9 3 2\n 5 6 6 7 2 2 5 1 0 2 9 7 6 0 8 2 0 1 1 7 6 7 4 6 6 7 8 8 9 7 6 8 8 1 0 1 1\n 6 0 0 2 6 7 8 3 1 1 5 2 5 5 5 4 2 4 9 4 6 3 7 3 4 2 4 4 8 1 4 4 2 9 4 3 9\n 2 9 4 7 3 0 5 1 6 8 8 7 4 1 1 0 2 1 8 3 7 7 0 3 5 5 8 2 1 4 1 3 0 7 1 0 5\n 2 1 4 0 1 2 1 4 4 9 8 5 8 1 3 2 8 8 9 2 4 0 5 0 3 9 9 8 6 1 2 7 8 8 5 1 1\n 1 2 8 8 8 7 9 1 6 0 8 5 0 0 2 8 3 8 7 8 9 9 7 7 9 4 3 0 7 0 9 1 7 6 8 4 0\n 2 0 9 7 6 9 8 7 6 3 2 1 6 2 5 9 1 5 4 1 7 8 3 7 5 2 3 3 4 2 2 3 0 7 3 3 6\n 9 9 5 6 5 3 0 5 1 6 6 6 2 3 5 2 4 1 6 4 7 6 1 1 0 6 9 6 8 2 7 6 1 6 9 1 3\n 7 8 3 6 8 1 2 9 9 6 1 3 6 5 3 3 9 7 0 5 9 5 4 0 7 0 7 4 5 0 7 7 7 1 4 6 8\n 9 3 8 1 2 6 4 3 6 6 6 2 5 5 5 5 0 5 4 2 3 0 7 7 8 7 1 6 1 6 7 5 9 1 1 9 7\n 0 5 4 7 8 6 2 7 2 5 6 8 2 5 0 4 2 4 4 4 0 1 1 2 0 3 9 9 7 2 5 8 0 6 1 2 1\n 8 8 3 6 7 2 8 9 0 0 7 1 1 2 7 4 6 0 4 6 7 6 6 8 0 5 1 5 2 5 0 5 9 0 6 2 4\n 8 1 0 5 4 9 8 5 2 9 8 3 0 0 0 2 5 9 9 3 8 3 0 9 3 1 6 1 8 4 4 3 8 1 0 8 1\n 9 2 3 0 6 7 7 0 3 0 3 3 5 4 5 3 2 0 7 8 4 3 6 3 8 8 7 7 1 5 7 3 2 9 4 8 7\n 4 3 8 1 1 1 9 7 0 4 4 2 1 6 5 9 4 1 2 0 6 0 9 4 6 9 2 2 1 5 4 1 0 6 5 8 7\n 1 1 1 9 0 7 8 3 5 0 5 7 9 0 7 0 2 2 4 5 0 9 4 0 5 0 3 8 1 7 7 0 6 3 9 6 7\n 0 4 6 8 0 9 2 5 7 7 5 8 4 0 2 7 7 8 1 4 1 4 7 4 5 3 6 4 3 8 1 8 1 1 1 7 7\n 9]\n","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"0.832"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"\n\n---\n\n## 🧾 Code Block Overview\n\nThis is a **Python script** that:\n- Loads the MNIST dataset (handwritten digits).\n- Preprocesses it.\n- Implements a **two-layer neural network from scratch** (no PyTorch or TensorFlow).\n- Trains it on the data.\n- Tests predictions and evaluates accuracy.\n\nWe'll go **line-by-line**, explaining every function, loop, and concept.\n\n---\n\n### 🔹 1. Import Libraries\n```python\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n```\n- `numpy`: Used for fast numerical operations like matrix multiplication.\n- `pandas`: Used to load CSV files into tables (like Excel).\n- `matplotlib.pyplot`: Used to plot images and graphs.\n\n---\n\n### 🔹 2. Load Data\n```python\ndata = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n```\n- This reads the MNIST training data (`train.csv`) which has over 42,000 rows of digit images.\n- Each row contains:\n  - One label (the actual digit: 0–9)\n  - Followed by 784 numbers representing pixel values of a 28x28 image.\n\n---\n\n### 🔹 3. Convert to NumPy Array\n```python\ndata = np.array(data)\nm, n = data.shape\n```\n- Converts the data into a NumPy array (easier to work with).\n- `m` = number of samples (rows), `n` = number of columns (785: 784 pixels + 1 label).\n\n---\n\n### 🔹 4. Shuffle Data\n```python\nnp.random.shuffle(data)\n```\n- Shuffles the data so we don’t get biased results.\n- Important before splitting into training and validation sets.\n\n---\n\n### 🔹 5. Split Validation Set (`dev`)\n```python\ndata_dev = data[0:1000].T\nY_dev = data_dev[0]\nX_dev = data_dev[1:n]\nX_dev = X_dev / 255.\n```\n- Takes first 1000 examples for validation/testing later.\n- `.T` transposes the data so each **column** is one example (instead of each row).\n- `Y_dev`: Extracts labels (first row).\n- `X_dev`: Extracts pixel data (remaining rows).\n- Normalize pixel values to range [0, 1] by dividing by 255.\n\n---\n\n### 🔹 6. Split Training Set\n```python\ndata_train = data[1000:m].T\nY_train = data_train[0]\nX_train = data_train[1:n]\nX_train = X_train / 255.\n_, m_train = X_train.shape\n```\n- Uses rest of data (after 1000) for training.\n- Again transpose and separate labels and inputs.\n- Normalize input again.\n- `_`, `m_train`: ignore first value, store number of training examples.\n\n---\n\n## 🧠 Neural Network Implementation\n\nNow comes the core of our neural network.\n\n---\n\n### 🔹 7. Define Initial Parameters\n```python\ndef init_params():\n    W1 = np.random.rand(10, 784) - 0.5\n    b1 = np.random.rand(10, 1) - 0.5\n    W2 = np.random.rand(10, 10) - 0.5\n    b2 = np.random.rand(10, 1) - 0.5\n    return W1, b1, W2, b2\n```\n- Initializes weights and biases randomly.\n- Shapes:\n  - `W1`: (10 x 784): Input → Hidden layer (10 units)\n  - `b1`: (10 x 1): Bias for hidden layer\n  - `W2`: (10 x 10): Hidden → Output layer\n  - `b2`: (10 x 1): Bias for output layer\n- Subtracts 0.5 to make values range from [-0.5, 0.5].\n\n---\n\n### 🔹 8. Activation Functions\n```python\ndef ReLU(Z):\n    return np.maximum(Z, 0)\n\ndef softmax(Z):\n    A = np.exp(Z) / sum(np.exp(Z))\n    return A\n```\n- **ReLU**: Returns max(0, Z). Introduces non-linearity.\n- **Softmax**: Turns raw outputs into probabilities that sum to 1.\n\n---\n\n### 🔹 9. Forward Propagation\n```python\ndef forward_prop(W1, b1, W2, b2, X):\n    Z1 = W1.dot(X) + b1\n    A1 = ReLU(Z1)\n    Z2 = W2.dot(A1) + b2\n    A2 = softmax(Z2)\n    return Z1, A1, Z2, A2\n```\n- Computes activations step by step.\n  - `Z1` = linear transformation of input using weights `W1`\n  - `A1` = apply ReLU\n  - `Z2` = linear transformation of hidden layer using `W2`\n  - `A2` = apply Softmax (final output)\n\n---\n\n### 🔹 10. Derivative of ReLU\n```python\ndef ReLU_deriv(Z):\n    return Z > 0\n```\n- Returns 1 where Z > 0, else 0.\n- Used during backpropagation.\n\n---\n\n### 🔹 11. One-Hot Encoding\n```python\ndef one_hot(Y):\n    one_hot_Y = np.zeros((Y.size, Y.max() + 1))\n    one_hot_Y[np.arange(Y.size), Y] = 1\n    one_hot_Y = one_hot_Y.T\n    return one_hot_Y\n```\n- Converts labels like `[2, 1, 4]` into:\n  ```\n  [[0, 0, 1, ..., 0],\n   [0, 1, 0, ..., 0],\n   ...]\n  ```\n- Transpose so each column corresponds to one sample.\n\n---\n\n### 🔹 12. Backward Propagation\n```python\ndef backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y):\n    one_hot_Y = one_hot(Y)\n    dZ2 = A2 - one_hot_Y\n    dW2 = 1/m * dZ2.dot(A1.T)\n    db2 = 1/m * np.sum(dZ2)\n    dZ1 = W2.T.dot(dZ2) * ReLU_deriv(Z1)\n    dW1 = 1/m * dZ1.dot(X.T)\n    db1 = 1/m * np.sum(dZ1)\n    return dW1, db1, dW2, db2\n```\n- Calculates how much the error came from each weight.\n- Uses chain rule of derivatives to trace backwards.\n- These gradients tell us how to update weights to reduce error.\n\n---\n\n### 🔹 13. Update Parameters\n```python\ndef update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):\n    W1 = W1 - alpha * dW1\n    b1 = b1 - alpha * db1    \n    W2 = W2 - alpha * dW2  \n    b2 = b2 - alpha * db2    \n    return W1, b1, W2, b2\n```\n- Adjust weights and biases based on gradients.\n- `alpha` is the learning rate — controls how big the updates are.\n\n---\n\n### 🔹 14. Get Final Predictions\n```python\ndef get_predictions(A2):\n    return np.argmax(A2, 0)\n```\n- From final output (softmax), returns predicted class (digit 0–9).\n- `argmax` finds index with highest probability.\n\n---\n\n### 🔹 15. Calculate Accuracy\n```python\ndef get_accuracy(predictions, Y):\n    print(predictions, Y)\n    return np.sum(predictions == Y) / Y.size\n```\n- Compares predicted labels with true labels.\n- Returns percentage correct.\n\n---\n\n### 🔹 16. Full Gradient Descent Loop\n```python\ndef gradient_descent(X, Y, alpha, iterations):\n    W1, b1, W2, b2 = init_params()\n    for i in range(iterations):\n        Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)\n        dW1, db1, dW2, db2 = backward_prop(Z1, A1, Z2, A2, W1, W2, X, Y)\n        W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)\n        if i % 10 == 0:\n            print(\"Iteration: \", i)\n            predictions = get_predictions(A2)\n            print(get_accuracy(predictions, Y))\n    return W1, b1, W2, b2\n```\n- Runs all steps in a loop for fixed number of `iterations`.\n- Every 10 iterations, prints current iteration and accuracy.\n- Returns final trained weights and biases.\n\n---\n\n### 🔹 17. Train Model\n```python\nW1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 500)\n```\n- Trains model for 500 iterations with learning rate `0.1`.\n- Achieves ~85% accuracy on training set.\n\n---\n\n### 🔹 18. Make Predictions Function\n```python\ndef make_predictions(X, W1, b1, W2, b2):\n    _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)\n    predictions = get_predictions(A2)\n    return predictions\n```\n- Takes new input `X` and makes prediction using trained weights.\n\n---\n\n### 🔹 19. Test Prediction on Specific Image\n```python\ndef test_prediction(index, W1, b1, W2, b2):\n    current_image = X_train[:, index, None]\n    prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)\n    label = Y_train[index]\n    print(\"Prediction: \", prediction)\n    print(\"Label: \", label)\n    current_image = current_image.reshape((28, 28)) * 255\n    plt.gray()\n    plt.imshow(current_image, interpolation='nearest')\n    plt.show()\n```\n- Shows image at given `index`, its predicted label, and actual label.\n- Displays grayscale image using matplotlib.\n\n---\n\n### 🔹 20. Evaluate on Dev Set\n```python\ndev_predictions = make_predictions(X_dev, W1, b1, W2, b2)\nget_accuracy(dev_predictions, Y_dev)\n```\n- After training, run predictions on dev set.\n- Check generalization accuracy (~84%).\n\n---\n\n## ✅ Summary Table\n\n| Part | What It Does |\n|------|---------------|\n| `init_params()` | Starts with random weights |\n| `forward_prop()` | Makes a prediction |\n| `backward_prop()` | Figures out how wrong the prediction was |\n| `update_params()` | Adjusts weights to improve next guess |\n| `gradient_descent()` | Loops above steps many times to train |\n| `make_predictions()` | Make predictions on new data |\n| `test_prediction()` | Show prediction vs truth visually |\n\n---\n\n ","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}